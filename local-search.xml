<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>about me</title>
    <link href="/2021/11/12/about/me/"/>
    <url>/2021/11/12/about/me/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>about me</title>
    <link href="/2021/11/12/about-me/"/>
    <url>/2021/11/12/about-me/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>OC 对象本质</title>
    <link href="/2021/11/09/nature-of-object/"/>
    <url>/2021/11/09/nature-of-object/</url>
    
    <content type="html"><![CDATA[<p>我们平时编写的Objective-C代码，底层实现其实都是C\C++代码<br>对象基于 C 的 struct 来实现的<br><img src="https://cdn.nlark.com/yuque/0/2021/png/12601335/1636359832020-748d612a-a5d5-43a2-9edc-bd2c0a6d8544.png#clientId=u11dac9c6-f8c5-4&from=paste&height=123&id=u2cfb2d29&margin=%5Bobject%20Object%5D&name=image.png&originHeight=246&originWidth=2180&originalType=binary&ratio=1&size=48934&status=done&style=none&taskId=u2af95bb4-91e0-4505-9054-2c7464b1d26&width=1090" alt="image.png"><br>前端编译器是 clang<br>​</p><h3 id="OC-转-C"><a href="#OC-转-C" class="headerlink" title="OC 转 C++"></a>OC 转 C++</h3><p>将Objective-C代码转换为C\C++代码<br><code>xcrun -sdk iphoneos clang  -arch  arm64 -rewrite-objc  OC源文件  -o  输出的CPP文件</code><br>如果需要链接其他框架，使用<code>-framework</code>参数。比如<code>-frameworkUIKit</code><br>​</p><h3 id="OC-底层实现"><a href="#OC-底层实现" class="headerlink" title="OC 底层实现"></a>OC 底层实现</h3><p>NSObject的底层实现<br><img src="https://cdn.nlark.com/yuque/0/2021/png/12601335/1636360273820-7ce7b98d-0a08-4d23-9162-e1d3a17ed400.png#clientId=u11dac9c6-f8c5-4&from=paste&height=207&id=u9e37c026&margin=%5Bobject%20Object%5D&name=image.png&originHeight=414&originWidth=1768&originalType=binary&ratio=1&size=265168&status=done&style=none&taskId=u373712c6-330b-4fd3-8c35-3fac701f552&width=884" alt="image.png"></p><h3 id="OC-对象内存分配"><a href="#OC-对象内存分配" class="headerlink" title="OC 对象内存分配"></a>OC 对象内存分配</h3><p>结构体内存对齐： 结构体大小的必须是最大成员大小的倍数<br>操作系统分配内存时的内存对齐：是 16 的倍数，方便操作系统进行操作<br>malloc 源码规定对象最少也要分配 16字节</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-comment">// 获取NSObject 类的实例成员对象所占的大小</span><br><span class="hljs-meta">#import <span class="hljs-meta-string">&lt;objc/runtime.h&gt;</span></span><br>class_getInstanceSize([<span class="hljs-built_in">NSObjectclass</span>]);<br><br><span class="hljs-comment">// 创建一个实例对象，实际上分配了多少内存</span><br><span class="hljs-meta">#import <span class="hljs-meta-string">&lt;malloc/malloc.h&gt;</span></span><br>malloc_size((__bridgeconstvoid *)obj);<br><br><span class="hljs-comment">// 本质是一个运算符、编译后就变成常数</span><br><span class="hljs-keyword">sizeof</span>(类型)<br></code></pre></td></tr></table></figure><h3 id="OC-对象的分类"><a href="#OC-对象的分类" class="headerlink" title="OC 对象的分类"></a>OC 对象的分类</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12601335/1636387208461-f7504f4e-aecb-47d7-9cb8-3fafb47af01f.png#clientId=u8a4b0efc-5a91-4&from=paste&height=593&id=u63c69d2d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1186&originWidth=1138&originalType=binary&ratio=1&size=184831&status=done&style=none&taskId=u518467ac-ac4a-4e39-8ce5-ac39631f3fe&width=569" alt="image.png"></p><h4 id="instance"><a href="#instance" class="headerlink" title="instance"></a>instance</h4><ol><li><p>isa指针</p></li><li><p>其他成员变量</p><h4 id="class"><a href="#class" class="headerlink" title="class"></a>class</h4><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12601335/1636369535218-d264acd2-00ae-420a-b4c8-9d830e79ec0e.png#clientId=u4804c718-c41e-4&from=paste&height=367&id=ucb310631&margin=%5Bobject%20Object%5D&name=image.png&originHeight=734&originWidth=450&originalType=binary&ratio=1&size=124240&status=done&style=none&taskId=u38e9f4d5-5fea-412e-8ec8-9eb650e1429&width=225" alt="image.png"></p></li><li><p>isa指针</p></li><li><p>superclass指针</p></li><li><p>类的属性信息（@property）、类的对象方法信息（instance method）</p></li><li><p>类的协议信息（protocol）、类的成员变量信息（ivar）</p></li><li><p>……</p></li></ol><h4 id="meta-class"><a href="#meta-class" class="headerlink" title="meta-class"></a>meta-class</h4><p>每个类在内存中有且只有一个meta-class对象<br>meta-class对象和class对象的内存结构是一样的，但是用途不一样，在内存中存储的信息主要包括<br><img src="https://cdn.nlark.com/yuque/0/2021/png/12601335/1636386599159-74a4833b-5b08-4e40-bd76-9067d3f42e2d.png#clientId=u859ffdfd-0f1a-4&from=paste&height=312&id=u27c8c4f8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=624&originWidth=556&originalType=binary&ratio=1&size=38414&status=done&style=none&taskId=uf202e855-8c1b-409d-9e55-496388d1406&width=278" alt="image.png"></p><ol><li>isa指针</li><li>superclass指针</li><li>类的类方法信息（classmethod）</li><li>……</li></ol><p>​</p><p>objc_getClass(const char *aClassName)<br>​</p><p>object_getClass(id obj)<br>​</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>同层级多个 scrollview 滚动如同在一个 scrollview</title>
    <link href="/2021/11/09/mul-scrollview/"/>
    <url>/2021/11/09/mul-scrollview/</url>
    
    <content type="html"><![CDATA[<blockquote><p>如果实现多一层级的多个 scrollview</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>自定义Button, 约束布局</title>
    <link href="/2019/10/03/ezbutton/"/>
    <url>/2019/10/03/ezbutton/</url>
    
    <content type="html"><![CDATA[<p>鉴于系统提供的UIButton 用起来非常不方便.<br>自定义了一个EZButton, 内部通过约束布局,.<br>支持图片文字,上下/左右排布.<br>支持居中, 居左, 居上, 居右, 居下等</p><p><a href="https://github.com/JemesL/EZButton">Demo</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JLSTAT</title>
    <link href="/2019/10/03/jlstat/"/>
    <url>/2019/10/03/jlstat/</url>
    
    <content type="html"><![CDATA[<p>前面为了方便 给视图添加多状态操作, 是通过继承的方式添加属性来操作的.<br>这样的缺点是不得不为每一个空间都要写一个控件写一个子类.</p><p>后面通过参照rxswift, 来给所有的view 添加多状态操作.</p><p>主要也是先通过给view 添加一个 jl 的命名空间, 然后再通过运行时, 为 view 关联一个block.<br>设置状态时, 再调用关联的block.</p><p><a href="https://github.com/JemesL/JLSTAT">Demo</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">JLSpace</span> <span class="title">where</span> <span class="title">Base</span>: <span class="title">UIView</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setStatBlock</span>&lt;<span class="type">E</span>&gt;(<span class="params">defaultValue</span>: <span class="type">E</span>, <span class="params">block</span>: <span class="keyword">@escaping</span> (<span class="type">Base</span>, <span class="type">E</span>) -&gt; ())</span> &#123;</span><br><span class="line">        <span class="keyword">typealias</span> <span class="type">STATBE</span> <span class="operator">=</span> <span class="type">STAT</span>&lt;<span class="type">Base</span>, <span class="type">E</span>&gt;</span><br><span class="line">        <span class="keyword">let</span> stat <span class="operator">=</span> <span class="type">STATBE</span>(e: defaultValue, block: block)</span><br><span class="line">        objc_setAssociatedObject(<span class="keyword">self</span>.base, <span class="operator">&amp;</span><span class="type">AssociatedKeys</span>.statKey, stat, .<span class="type">OBJC_ASSOCIATION_RETAIN</span>)</span><br><span class="line">        </span><br><span class="line">        block(<span class="keyword">self</span>.base, defaultValue)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setStat</span>&lt;<span class="type">E</span>&gt;(<span class="params">e</span>: <span class="type">E</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">typealias</span> <span class="type">STATBE</span> <span class="operator">=</span> <span class="type">STAT</span>&lt;<span class="type">Base</span>, <span class="type">E</span>&gt;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">var</span> stat <span class="operator">=</span> objc_getAssociatedObject(<span class="keyword">self</span>.base, <span class="operator">&amp;</span><span class="type">AssociatedKeys</span>.statKey) <span class="keyword">as?</span> <span class="type">STATBE</span> &#123;</span><br><span class="line">            stat.block<span class="operator">?</span>(<span class="keyword">self</span>.base, e)</span><br><span class="line">            stat.e <span class="operator">=</span> e</span><br><span class="line">            objc_setAssociatedObject(<span class="keyword">self</span>.base, <span class="operator">&amp;</span><span class="type">AssociatedKeys</span>.statKey, stat, .<span class="type">OBJC_ASSOCIATION_RETAIN</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getStat</span>&lt;<span class="type">E</span>&gt;()</span> -&gt; <span class="type">E</span>? &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> statBlock <span class="operator">=</span> objc_getAssociatedObject(<span class="keyword">self</span>.base, <span class="operator">&amp;</span><span class="type">AssociatedKeys</span>.statKey) <span class="keyword">as?</span> <span class="type">STAT</span>&lt;<span class="type">Base</span>, <span class="type">E</span>&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> statBlock.e</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">STAT</span>&lt;<span class="title">Base</span>, <span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">STATBLOCK</span> <span class="operator">=</span> (<span class="type">Base</span>, <span class="type">E</span>) -&gt; ()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> block: <span class="type">STATBLOCK</span>?</span><br><span class="line">    <span class="keyword">var</span> e: <span class="type">E</span>?</span><br><span class="line">    <span class="function"><span class="keyword">init</span>(<span class="params">e</span>: <span class="type">E</span>?, <span class="params">block</span>: <span class="type">STATBLOCK</span>?)</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.block <span class="operator">=</span> block</span><br><span class="line">        <span class="keyword">self</span>.e <span class="operator">=</span> e</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Swift 编译优化</title>
    <link href="/2019/07/28/swift-compile/"/>
    <url>/2019/07/28/swift-compile/</url>
    
    <content type="html"><![CDATA[<p>swift 有些语法写起来很便捷, 但是编译效率却很低.<br>当代码量到一定程度, 编译起来, 耗费很多时间.</p><p>###下面总结一些, 部分导致编译效率低下的写法.</p><ol><li>使用 ?? 来解包, 尤其是在某个表达式里面使用, 越复杂越低效, 低到难以置信</li><li>数组拼接使用 + , 建议使用.append 方法进行</li><li>字符串拼接不要使用+, 使用 “(var)”</li><li>对于复杂的变量, 建议声明时写上类型</li><li>对于像if 类似的条件判断里面表达式不要太复杂, 比较复杂的可以先算完在来判断</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Swift 时间格式处理</title>
    <link href="/2019/03/20/date/"/>
    <url>/2019/03/20/date/</url>
    
    <content type="html"><![CDATA[<h4 id="1-String-gt-Date"><a href="#1-String-gt-Date" class="headerlink" title="1. String -&gt; Date"></a>1. String -&gt; Date</h4><p>有一个需要注意的是如果字符串里面包含了时区信息, 那么设置 TimeZone 无效</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// String -&gt; Date</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// - Parameters:</span></span><br><span class="line">    <span class="comment">///   - format: 原时间字符串的格式</span></span><br><span class="line">    <span class="comment">///   - timeZone: 该字符串的时区(若字符串自带时区信息, 则该设置无效), default: 当前时区</span></span><br><span class="line">    <span class="comment">/// - Returns: Date</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">toDate</span>(<span class="params">format</span>: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&quot;</span>, <span class="params">timeZone</span>: <span class="type">TimeZone</span>? <span class="operator">=</span> .current)</span> -&gt; <span class="type">Date</span>? &#123;</span><br><span class="line">        <span class="keyword">let</span> formatter <span class="operator">=</span> <span class="type">DateFormatter</span>()</span><br><span class="line">        formatter.timeZone <span class="operator">=</span> timeZone</span><br><span class="line">        formatter.dateFormat <span class="operator">=</span> format</span><br><span class="line">        <span class="keyword">return</span> formatter.date(from: <span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如下 无论时区设置成什么, 结果都一样</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 <span class="operator">=</span> <span class="string">&quot;2019-03-20T09:48:55.801Z&quot;</span></span><br><span class="line"><span class="comment">// 东八区</span></span><br><span class="line"><span class="keyword">let</span> date11 <span class="operator">=</span> str1.toDate(timeZone: <span class="type">TimeZone</span>(secondsFromGMT: <span class="number">28800</span>)) <span class="comment">//&quot;Mar 20, 2019 at 5:48 PM&quot;</span></span><br><span class="line"><span class="comment">// 零时区</span></span><br><span class="line"><span class="keyword">let</span> date12 <span class="operator">=</span> str1.toDate(timeZone: <span class="type">TimeZone</span>(secondsFromGMT: <span class="number">0</span>))     <span class="comment">//&quot;Mar 20, 2019 at 5:48 PM&quot;</span></span><br></pre></td></tr></table></figure><p>不包含时区信息时, 这时候时区不同是有影响的</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str2 <span class="operator">=</span> <span class="string">&quot;2019-03-20 20:48:55&quot;</span></span><br><span class="line"><span class="comment">// 东八区</span></span><br><span class="line"><span class="keyword">let</span> date21 <span class="operator">=</span> str2.toDate(format: <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>, timeZone: <span class="type">TimeZone</span>(secondsFromGMT: <span class="number">28800</span>)) <span class="comment">//&quot;Mar 20, 2019 at 8:48 PM&quot;</span></span><br><span class="line"><span class="comment">// 零时区</span></span><br><span class="line"><span class="keyword">let</span> date22 <span class="operator">=</span> str2.toDate(format: <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>, timeZone: <span class="type">TimeZone</span>(secondsFromGMT: <span class="number">0</span>))     <span class="comment">//&quot;Mar 21, 2019 at 4:48 AM&quot;</span></span><br></pre></td></tr></table></figure><h4 id="2-Date-gt-String"><a href="#2-Date-gt-String" class="headerlink" title="2. Date -&gt; String"></a>2. Date -&gt; String</h4><p>此时, 设置 timeZone 将会把时间转成时区当地时间并按格式展示</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Date</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// Date -&gt; String</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// - Parameter</span></span><br><span class="line">    <span class="comment">///   - format: 需要转为的时间格式</span></span><br><span class="line">    <span class="comment">///   - timeZone: 展示的时间时区, default: 当前时区</span></span><br><span class="line">    <span class="comment">/// - Returns: String</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">toString</span>(<span class="params">format</span>: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>, <span class="params">timeZone</span>: <span class="type">TimeZone</span>? <span class="operator">=</span> .current)</span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="type">NSTimeZone</span>.resetSystemTimeZone()</span><br><span class="line">        <span class="keyword">let</span> formatter <span class="operator">=</span> <span class="type">DateFormatter</span>()</span><br><span class="line">        formatter.timeZone <span class="operator">=</span> timeZone</span><br><span class="line">        formatter.dateFormat <span class="operator">=</span> format</span><br><span class="line"></span><br><span class="line">        formatter.locale <span class="operator">=</span> <span class="type">Locale</span>(identifier: <span class="string">&quot;zh_CN&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> formatter.string(from: <span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如下:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 零时区</span></span><br><span class="line">date3<span class="operator">?</span>.toString(format: <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>, timeZone: <span class="type">TimeZone</span>(secondsFromGMT: <span class="number">0</span>))     <span class="comment">//&quot;2019-03-20 12:48:55&quot;</span></span><br><span class="line"><span class="comment">// 东八区</span></span><br><span class="line">date3<span class="operator">?</span>.toString(format: <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>, timeZone: <span class="type">TimeZone</span>(secondsFromGMT: <span class="number">28800</span>)) <span class="comment">//&quot;2019-03-20 20:48:55&quot;</span></span><br></pre></td></tr></table></figure><h4 id="3-Date-gt-String-类似朋友圈的时间格式"><a href="#3-Date-gt-String-类似朋友圈的时间格式" class="headerlink" title="3. Date -&gt; String(类似朋友圈的时间格式)"></a>3. Date -&gt; String(类似朋友圈的时间格式)</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeTool</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// Date -&gt; String(朋友圈时间显示格式)</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// - Parameter with: Date</span></span><br><span class="line">    <span class="comment">/// - Returns: String</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">toMsgTime</span>(<span class="params">with</span> <span class="params">date</span>: <span class="type">Date</span>)</span> -&gt; <span class="type">String</span>? &#123;</span><br><span class="line">        <span class="keyword">let</span> sinceDate <span class="operator">=</span> date</span><br><span class="line">        <span class="keyword">let</span> curDate <span class="operator">=</span> <span class="type">Date</span>()</span><br><span class="line">        <span class="keyword">let</span> i: <span class="type">Int</span> <span class="operator">=</span> <span class="type">Int</span>(curDate.timeIntervalSince(sinceDate))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> minute: <span class="type">Int</span> <span class="operator">=</span> <span class="number">60</span></span><br><span class="line">        <span class="keyword">let</span> hour: <span class="type">Int</span> <span class="operator">=</span> minute <span class="operator">*</span> <span class="number">60</span></span><br><span class="line">        <span class="keyword">let</span> day: <span class="type">Int</span> <span class="operator">=</span> hour <span class="operator">*</span> <span class="number">24</span></span><br><span class="line">        <span class="keyword">let</span> month: <span class="type">Int</span> <span class="operator">=</span> day <span class="operator">*</span> <span class="number">30</span> <span class="comment">// 平均值</span></span><br><span class="line">        <span class="keyword">let</span> year: <span class="type">Int</span> <span class="operator">=</span> month <span class="operator">*</span> <span class="number">12</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> str <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">switch</span> i &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span><span class="operator">..&lt;</span>minute:</span><br><span class="line">            str <span class="operator">=</span> <span class="string">&quot;刚刚&quot;</span></span><br><span class="line">        <span class="keyword">case</span> minute<span class="operator">..&lt;</span>hour:</span><br><span class="line">            str <span class="operator">=</span> <span class="string">&quot;<span class="subst">\(i<span class="operator">/</span>minute)</span> 分钟前&quot;</span></span><br><span class="line">        <span class="keyword">case</span> hour<span class="operator">..&lt;</span>day:</span><br><span class="line">            str <span class="operator">=</span> <span class="string">&quot;<span class="subst">\(i<span class="operator">/</span>hour)</span> 小时前&quot;</span></span><br><span class="line">        <span class="keyword">case</span> day<span class="operator">..&lt;</span>month:</span><br><span class="line">            str <span class="operator">=</span> <span class="string">&quot;<span class="subst">\(i<span class="operator">/</span>day)</span> 天前&quot;</span></span><br><span class="line">        <span class="keyword">case</span> month<span class="operator">..&lt;</span>year:</span><br><span class="line">            str <span class="operator">=</span> <span class="string">&quot;<span class="subst">\(i<span class="operator">/</span>month)</span> 月前&quot;</span></span><br><span class="line">        <span class="keyword">case</span> year<span class="operator">..&lt;</span><span class="type">LONG_MAX</span>:</span><br><span class="line">            str <span class="operator">=</span> <span class="string">&quot;<span class="subst">\(i<span class="operator">/</span>year)</span> 年前&quot;</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.unicode.org/reports/tr35/tr35-25.html#Date_Format_Patterns">Date Format Patterns支持的格式</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Swift 编译优化</title>
    <link href="/2019/03/07/swift-build-optimizing/"/>
    <url>/2019/03/07/swift-build-optimizing/</url>
    
    <content type="html"><![CDATA[<p>之前每次编译, 需要花费太长时间. 甚至改一行代码也是如此.<br>后面花了一些时间去做优化</p><h3 id="显示编译耗时过长的警告"><a href="#显示编译耗时过长的警告" class="headerlink" title="显示编译耗时过长的警告"></a>显示编译耗时过长的警告</h3><p>target -&gt; buildsetting -&gt; Other Swift Flags -&gt; Debug<br>添加<br>-Onone<br>-Xfrontend<br>-warn-long-function-bodies=100 // 检测函数体的 类型检查 100ms 是警告的上限<br>-Xfrontend<br>-warn-long-expression-type-checking=100 // 检查表达式</p><h3 id="多线程build"><a href="#多线程build" class="headerlink" title="多线程build"></a>多线程build</h3><p>scheme 的 build 页面<br>勾上 Parallelize Build</p><h3 id="单文件-增量编译"><a href="#单文件-增量编译" class="headerlink" title="单文件 增量编译"></a>单文件 增量编译</h3><p>target -&gt; buildsetting -&gt; SWIFT_WHOLE_MODULE_OPTIMIZATION<br>设置为NO</p><h3 id="编译模式"><a href="#编译模式" class="headerlink" title="编译模式"></a>编译模式</h3><p>target -&gt; buildsetting -&gt; compilation mode<br>设置为 incremental 增量模式</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>一个比较少见的循环引用</title>
    <link href="/2019/01/09/arc/"/>
    <url>/2019/01/09/arc/</url>
    
    <content type="html"><![CDATA[<p>循环引用应该大部分人都知道怎么回事.</p><h4 id="较常见的就有"><a href="#较常见的就有" class="headerlink" title="较常见的就有"></a>较常见的就有</h4><ul><li>A实例 强引用 B实例, B 强引用 A.</li><li>A实例强引用 Block B, B 里面 调用了self</li></ul><p>在开发的时候发现另一个类型, 不过有点类似上述的第二个</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> info: <span class="type">Info</span>?</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Info</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">        <span class="keyword">var</span> family: <span class="type">String</span></span><br><span class="line">        <span class="keyword">var</span> age: <span class="type">Int</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">printInfo</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> info <span class="operator">=</span> info &#123;</span><br><span class="line">            <span class="built_in">print</span>(info)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">transform</span>()</span> -&gt; <span class="type">Info</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.info <span class="operator">=</span> <span class="type">Info</span>(</span><br><span class="line">            name: <span class="string">&quot;吴彦祖&quot;</span>,</span><br><span class="line">            family: <span class="string">&quot;吴氏家族&quot;</span>,</span><br><span class="line">            age: <span class="number">20</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.info<span class="operator">!</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">deinit</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;deinit&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> block <span class="operator">=</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;begin&quot;</span>)</span><br><span class="line">    <span class="keyword">let</span> p <span class="operator">=</span> <span class="type">Person</span>()</span><br><span class="line">    p.transform()</span><br><span class="line">    <span class="built_in">print</span>(<span class="type">CFGetRetainCount</span>(p <span class="keyword">as</span> <span class="type">CFTypeRef</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;end&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">block()</span><br></pre></td></tr></table></figure><p>上述代码 run 一下 结果如下, </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">begin</span><br><span class="line"><span class="number">2</span></span><br><span class="line">end</span><br><span class="line"><span class="keyword">deinit</span></span><br></pre></td></tr></table></figure><p>打印 deinit 了,说明 p 正常释放了, 没有循环引用</p><p>然后现在改一下 Struct Info 和 transform 方法, 在里面添加 prinfFunc 方法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Info</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> family: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> printFunc: () -&gt; ()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">transform</span>()</span> -&gt; <span class="type">Info</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Info</span>(</span><br><span class="line">        name: <span class="string">&quot;吴彦祖&quot;</span>,</span><br><span class="line">        family: <span class="string">&quot;吴氏家族&quot;</span>,</span><br><span class="line">        age: <span class="number">20</span>,</span><br><span class="line">        printFunc: printInfo</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次 run 一下, 打印结果如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">begin</span><br><span class="line"><span class="number">3</span></span><br><span class="line">end</span><br><span class="line"><span class="keyword">deinit</span></span><br></pre></td></tr></table></figure><p>依旧可以打印出 deinit, 但是 p 的引用计数 +1.<br>说明在 struct 里面持有 某实例的方法会让该实例引用计数 +1.</p><p>现在如果把 transform 调整如下, 返回 info 之前让 赋值给 self.info</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">transform</span>()</span> -&gt; <span class="type">Info</span> &#123;</span><br><span class="line">    <span class="keyword">self</span>.info <span class="operator">=</span> <span class="type">Info</span>(</span><br><span class="line">        name: <span class="string">&quot;吴彦祖&quot;</span>,</span><br><span class="line">        family: <span class="string">&quot;吴氏家族&quot;</span>,</span><br><span class="line">        age: <span class="number">20</span>,</span><br><span class="line">        printFunc: printInfo</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.info<span class="operator">!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印如下:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">begin</span><br><span class="line"><span class="number">3</span></span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>这一次没有 deinit, p 没有被释放, 形成了循环引用.<br>造成这个循环主要是没想到 struct 里面持有方法, 也会造成计数 +1.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Xcode 利用正则进行搜索&amp;替换</title>
    <link href="/2018/12/17/xcode-regular/"/>
    <url>/2018/12/17/xcode-regular/</url>
    
    <content type="html"><![CDATA[<p>这里说的正则不是指的swift里的正则，而是xcode自带的搜索替换功能中使用正则来修改文件代码。<br>之前有个需求就是多人开发的项目，由于个人风格原因，导致部分代码书写规范不一致。<br>但是项目已经很大了，差不多也有近七万行代码。想手动一个一个去改是不太现实的，所以想到正则。<br>于是去搜了搜，发现xcode自带这个功能，这下正好省事了。</p><p>至于正则规则如何，网上有很多教程，就不多说了。</p><h4 id="1-切换-Find-Replace-模式"><a href="#1-切换-Find-Replace-模式" class="headerlink" title="1. 切换 Find/Replace 模式"></a>1. 切换 Find/Replace 模式</h4><p>按Command+Shift+F / Command+F 快捷键快速进入Find 模式，点击Find后第二个箭头，可以切换查找模式至 Regular Expression。<br>在下面的输入框就可以输入正则表达式来进行查询替换</p><h3 id="2-举个🌰"><a href="#2-举个🌰" class="headerlink" title="2. 举个🌰"></a>2. 举个🌰</h3><p>现在需要优化一下代码书写规范，需要每个冒号后面都需要添加空格<br>在Find 栏填入 <strong>“:([^\s])”</strong> ,会匹配冒号后带任何非空字符<br>为了避免匹配上 <strong>“[:]”</strong> 或者 <strong>“http://“</strong> 的情况<br>可以改为 <strong>“:([^\s/]])”</strong></p><p>如果需要替换成带空格的，则切到Replace 模式<br>在Replace 一栏填入 <strong>“: $1”</strong><br><strong>“$1”</strong> 是Find 中正则表达式中圆括号匹配到的内容</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Swift 4.0 编码规范</title>
    <link href="/2018/12/05/swiftcode/"/>
    <url>/2018/12/05/swiftcode/</url>
    
    <content type="html"><![CDATA[<h3 id="1-编码格式"><a href="#1-编码格式" class="headerlink" title="1.编码格式"></a>1.编码格式</h3><ul><li><p>每行最多160个字符，这样可以避免一行过长。 (Xcode-&gt;Preferences-&gt;Text Editing-&gt;Page guide at column: 设置成160即可)</p></li><li><p>确保每行都不以空白字符作为结尾 （Xcode-&gt;Preferences-&gt;Text Editing-&gt;Automatically trim trailing whitespace + Including whitespace-only lines).</p></li><li><p>使用二元运算符(+, -，==, 或-&gt;)的前后都需要添加空格</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> value <span class="operator">=</span> (<span class="number">1</span> <span class="operator">+</span> <span class="number">2</span>) <span class="operator">*</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p>在逗号、冒号后面加一个空格</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr <span class="operator">=</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> dict <span class="operator">=</span> [<span class="string">&quot;123&quot;</span>: <span class="number">123</span>]</span><br></pre></td></tr></table></figure></li><li><p>方法的左大括号不要另起，并和方法名之间留有空格，注释空格</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注释</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeSomething</span> </span>&#123;</span><br><span class="line">  <span class="comment">// coding</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>判断语句不用括号</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> isTrue <span class="operator">=</span> <span class="literal">true</span> &#123;</span><br><span class="line">  <span class="comment">// coding</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法的左大括号不要另起，并和方法名之间留有空格，注释空格</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> isTrue <span class="operator">=</span> <span class="literal">true</span> &#123;</span><br><span class="line">  <span class="comment">// coding</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>尽量不使用self. 除非方法参数与属性同名</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setContent</span>(<span class="params">name</span>: <span class="type">String</span>, <span class="params">count</span>: <span class="type">Int</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">self</span>.name <span class="operator">=</span> name</span><br><span class="line">    c <span class="operator">=</span> count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在访问枚举类型时，使用更简洁的点语法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ShareToPlatform</span> </span>&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="type">WX</span></span><br><span class="line">  <span class="keyword">case</span> <span class="type">TimeLine</span></span><br><span class="line">  <span class="keyword">case</span> <span class="type">QQ</span></span><br><span class="line">  <span class="keyword">case</span> <span class="type">Sina</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> platform <span class="operator">=</span> .<span class="type">QQ</span></span><br></pre></td></tr></table></figure></li><li><p>使用 // MARK: -，按功能、协议、代理等分组</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MARK: - UITableViewDelegate</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: - Action</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: - Request</span></span><br></pre></td></tr></table></figure></li><li><p>使用extension 隔离方法集，相关协议、类似功能放在一个extension里</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MARK: - UICollectionViewDelegate</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">JLViewController</span>: <span class="title">UICollectionViewDelegate</span> </span>&#123;</span><br><span class="line"><span class="comment">// 代理方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>当对外接口不兼容时，使用@available(iOS x.0, *) 标明接口适配的起始系统版本号</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@available</span>(<span class="keyword">iOS</span> <span class="number">10.0</span>, <span class="operator">*</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleSome</span>()</span> &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-命名规范"><a href="#2-命名规范" class="headerlink" title="2.命名规范"></a>2.命名规范</h3><ul><li>常量，变量，函数，方法的命名规则使用小驼峰规则，首字母小写，类型名使用大驼峰规则，首字母大写。<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@available</span>(<span class="keyword">iOS</span> <span class="number">10.0</span>, <span class="operator">*</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleSome</span>()</span> &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>当命名里出现缩写词时，缩写词要么全部大写，要么全部小写，以首字母大小写为准<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> htmlString <span class="operator">=</span> <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line"><span class="keyword">let</span> urlString:  <span class="type">URLString</span></span><br><span class="line"><span class="keyword">let</span> userID:  <span class="type">UserID</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HTMLModel</span> </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>bool类型命名时，使用is作为前缀<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isHave: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li>使用前缀 k + 大骆驼命名法 为所有非单例的静态常量命名。<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClassName</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 基元常量使用 k 作为前缀</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> kSomeConstantHeight: <span class="type">CGFloat</span> <span class="operator">=</span> <span class="number">80.0</span></span><br><span class="line">    <span class="comment">// 非基元常量也是用 k 作为前缀</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> kDeleteButtonColor <span class="operator">=</span> <span class="type">UIColor</span>.redColor()</span><br><span class="line">    <span class="comment">// 对于单例不要使用k作为前缀</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> sharedInstance <span class="operator">=</span> <span class="type">MyClassName</span>()</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-代码风格"><a href="#3-代码风格" class="headerlink" title="3.代码风格"></a>3.代码风格</h3></li><li>如果需要把访问修饰符放到第一个位置。</li><li>尽可能的多使用let，少使用var。</li><li>当需要遍历一个集合并变形成另一个集合时，推荐使用函数 map, filter 和 reduce。<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="keyword">let</span> stringOfInts <span class="operator">=</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].flatMap &#123; <span class="type">String</span>(<span class="variable">$0</span>) &#125;</span><br><span class="line"><span class="comment">// [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]</span></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="keyword">var</span> stringOfInts: [<span class="type">String</span>] <span class="operator">=</span> []</span><br><span class="line"><span class="keyword">for</span> integer <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] &#123;</span><br><span class="line">    stringOfInts.append(<span class="type">String</span>(integer))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="keyword">let</span> evenNumbers <span class="operator">=</span> [<span class="number">4</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">42</span>].filter &#123; <span class="variable">$0</span> <span class="operator">%</span> <span class="number">2</span> <span class="operator">==</span> <span class="number">0</span> &#125;</span><br><span class="line"><span class="comment">// [4, 8, 16, 42]</span></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="keyword">var</span> evenNumbers: [<span class="type">Int</span>] <span class="operator">=</span> []</span><br><span class="line"><span class="keyword">for</span> integer <span class="keyword">in</span> [<span class="number">4</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">42</span>] &#123;</span><br><span class="line">    <span class="keyword">if</span> integer <span class="operator">%</span> <span class="number">2</span> <span class="operator">==</span> <span class="number">0</span> &#123;</span><br><span class="line">        evenNumbers(integer)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>如果变量类型可以依靠推断得出，不建议声明变量时指明类型。</li><li>不要使用 as! 或 try!。</li><li>我们推荐使用提前返回的策略，而不是 if 语句的嵌套。使用 guard 语句可以改善代码的可读性。<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">eatDoughnut</span>(<span class="params">atIndex</span> <span class="params">index</span>: <span class="type">Int</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> index <span class="operator">&gt;=</span> <span class="number">0</span> <span class="operator">&amp;&amp;</span> index <span class="operator">&lt;</span> doughnuts <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果 index 超出允许范围，提前返回。</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> doughnut <span class="operator">=</span> doughnuts[index]</span><br><span class="line">    eat(doughnut)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">eatDoughnuts</span>(<span class="params">atIndex</span> <span class="params">index</span>: <span class="type">Int</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> index <span class="operator">&gt;=</span> <span class="number">0</span> <span class="operator">&amp;&amp;</span> index <span class="operator">&lt;</span> donuts.count &#123;</span><br><span class="line">        <span class="keyword">let</span> doughnut <span class="operator">=</span> doughnuts[index]</span><br><span class="line">        eat(doughnut)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-注释规范"><a href="#4-注释规范" class="headerlink" title="4.注释规范"></a>4.注释规范</h3><ul><li>MARK，用于方法或函数的注释。加上 ‘-’ 再函数列表会多一个横线分割<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MARK: - 描述内容</span></span><br><span class="line"><span class="comment">// MARK: 描述内容</span></span><br></pre></td></tr></table></figure></li><li>TODO，表示这里代码有没有完成，还要处理。加上 ‘-’ 再函数列表会多一个横线分割<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">TODO:</span> - 描述内容</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 描述内容</span></span><br></pre></td></tr></table></figure></li><li>FIXME，需要修改代码，bug等。加上 ‘-’ 再函数列表会多一个横线分割，且显示的icon 与mark和todo不通，更醒目<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">FIXME:</span> - 描述内容</span></span><br><span class="line"><span class="comment">// <span class="doctag">FIXME:</span> 描述内容</span></span><br></pre></td></tr></table></figure></li><li>添加文档注释（xcode 快捷键⌘⌥/）<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 获取用户的帐密信息</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// - Returns: 信息元组的 Observable</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fetchLocalInfo</span>()</span> -&gt; <span class="type">Observable</span>&lt;(<span class="type">String</span>, <span class="type">String</span>)?&gt; &#123;</span><br><span class="line">    <span class="comment">// coding</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Xcode 添加 script 自动更新 Build</title>
    <link href="/2018/11/27/runscript/"/>
    <url>/2018/11/27/runscript/</url>
    
    <content type="html"><![CDATA[<p>每次打包经常会遇到忘记修改 bulid 导致上传失败，又不得不重新打包上传，极其浪费时间。<br>xcode 的 Build Phases 的run script 可以添加脚本，来自动更新build的值</p><p>代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git=`sh /etc/profile; <span class="built_in">which</span> git`</span><br><span class="line">appBuild=`<span class="string">&quot;<span class="variable">$git</span>&quot;</span> rev-list --all |wc -l`</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$CONFIGURATION</span> = <span class="string">&quot;Debug&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">branchName=`<span class="string">&quot;<span class="variable">$git</span>&quot;</span> rev-parse --abbrev-ref HEAD`</span><br><span class="line">branchShort=`<span class="string">&quot;<span class="variable">$git</span>&quot;</span> rev-parse --abbrev-short HEAD`</span><br><span class="line">/usr/libexec/PlistBuddy -c <span class="string">&quot;Set :BranchName <span class="variable">$branchName</span>&quot;</span> <span class="string">&quot;<span class="variable">$&#123;TARGET_BUILD_DIR&#125;</span>/<span class="variable">$&#123;INFOPLIST_PATH&#125;</span>&quot;</span></span><br><span class="line">/usr/libexec/PlistBuddy -c <span class="string">&quot;Set :BranchShort <span class="variable">$branchShort</span>&quot;</span> <span class="string">&quot;<span class="variable">$&#123;TARGET_BUILD_DIR&#125;</span>/<span class="variable">$&#123;INFOPLIST_PATH&#125;</span>&quot;</span></span><br><span class="line">/usr/libexec/PlistBuddy -c <span class="string">&quot;Set :APPBuildNum <span class="variable">$appBuild</span>&quot;</span> <span class="string">&quot;<span class="variable">$&#123;TARGET_BUILD_DIR&#125;</span>/<span class="variable">$&#123;INFOPLIST_PATH&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">/usr/libexec/PlistBuddy -c <span class="string">&quot;Set :CFBundleVersion <span class="variable">$appBuild</span>&quot;</span> <span class="string">&quot;<span class="variable">$&#123;TARGET_BUILD_DIR&#125;</span>/<span class="variable">$&#123;INFOPLIST_PATH&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Updated <span class="variable">$&#123;TARGET_BUILD_DIR&#125;</span>/<span class="variable">$&#123;INFOPLIST_PATH&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><p>其中  <strong>BranchName</strong>、<strong>BranchShort</strong>、<strong>APPBuildNum</strong>、<strong>CFBundleVersion</strong>，前三个需要在info.plist 新增字段<br>也可以根据需求自定义其他字段。<br>这里根据 debug 和 release 做了区分。<br>DEBUG： 可以拿到 分支名字、 分支commitID、build次数<br>RELEASE：可以拿到build 次数</p><p>ps：目前，在多target版本还有点问题，在最初的target里没有问题，但是在copy出来的其他target暂时无法运行</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>多 Target 来进行 版本or环境 区分</title>
    <link href="/2018/11/26/mul-target/"/>
    <url>/2018/11/26/mul-target/</url>
    
    <content type="html"><![CDATA[<p>有时候项目对于环境的切换或者是同一套代码不同的app的切换，每次手动改代码很不方便，而且容易出错。<br>xcode 可以添加 Target 来非常方便的进行切换</p><h3 id="添加-Target-步骤"><a href="#添加-Target-步骤" class="headerlink" title="添加 Target 步骤"></a>添加 Target 步骤</h3><ul><li>在项目设置页面，在 TARGETS 下列表中，选择需要复制的target 右键，选Duplicate，再选 Duplicate only</li><li>然后Targets 下会新增一个 <strong>‘xxx copy’</strong> 的target，选中后 单击可改名</li><li>并且会多了一个  <strong>‘xxx copy-info.plist’</strong> 文件</li><li>可以点击target 配置不通的app name、bundleID、icon 等等其他相关配置</li></ul><h3 id="Target-区分配置"><a href="#Target-区分配置" class="headerlink" title="Target 区分配置"></a>Target 区分配置</h3><ul><li>在对应的 target 的 buildsetting 下找到 Preprocessor Macros, 该选择下面有个值 Debug 和 Release。在其中 Debug or Release 里面添加 某个参数=1，例如：在DEBUG 里面 添加 DEBUG=1。那么在scheme里面设置 build configuration 设置为 debug时，DEBUG 的值即为true，这个也可以用来切换线上线下环境<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">#if</span> <span class="type">DEBUG</span></span><br><span class="line"><span class="comment">// 测试环境</span></span><br><span class="line"><span class="keyword">#else</span></span><br><span class="line"><span class="comment">// 线上环境</span></span><br><span class="line"><span class="keyword">#endif</span></span><br></pre></td></tr></table></figure></li><li>在buildsetting 下的Other Swift flags 下也可添加标识符 ，在debug 和release 下添加即为true。<br>例如 如果在新target下的 debug下添加 -DDEBUG， 则DEBUG为true，debug release均添加 -DNEW，则不论debug还是release模式下， NEW均为true，这样就可以区分不同的target的配置一些<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">#if</span> <span class="type">NEW</span></span><br><span class="line"><span class="comment">// NEW target</span></span><br><span class="line"><span class="keyword">#else</span></span><br><span class="line"><span class="comment">// 非 NEW target</span></span><br><span class="line"><span class="keyword">#endif</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>iOS提高页面书写效率</title>
    <link href="/2018/11/24/ui-layout/"/>
    <url>/2018/11/24/ui-layout/</url>
    
    <content type="html"><![CDATA[<p>之前的项目用了的RXSwift 和 RxCocoa，现在结合RxCocoa 做一些动态布局的优化。</p><h3 id="一、实现类似H5的流式布局"><a href="#一、实现类似H5的流式布局" class="headerlink" title="一、实现类似H5的流式布局"></a>一、实现类似H5的流式布局</h3><p>如果了解H5的应该都知道它的流式布局非常方便，不需要考虑上下元素的关系。<br>iOS的布局其实类似H5的绝对布局，但每每要写清楚上下元素之间的关系，而且每当页面有元素增删的时候又要去修改相关的约束。</p><p>现在一个替代思路就是写一个通用的函数，给定元素的数组，父view等参数，函数内部执行添加相关约束。避免每次都要写约束以及改动</p><h3 id="二、点击功能的按钮的状态切换"><a href="#二、点击功能的按钮的状态切换" class="headerlink" title="二、点击功能的按钮的状态切换"></a>二、点击功能的按钮的状态切换</h3><p>在写某些按钮的时候，选择状态 和 非选择状态 样式差异比较大，btn自带的那些状态 不能够满足条件。<br>有时候只能根据上层传来的方法再去做相应的修改。<br>但是这样也写代码就不是舒服，可以结合rxswift ，继承btn,添加几个属性，如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lazy</span> <span class="keyword">var</span> disposeBag <span class="operator">=</span> <span class="type">DisposeBag</span>()</span><br><span class="line"><span class="keyword">typealias</span> <span class="type">Block</span> <span class="operator">=</span> (<span class="type">STATButton</span>) -&gt; ()</span><br><span class="line"><span class="keyword">var</span> stat <span class="operator">=</span> <span class="type">BehaviorRelay</span>&lt;<span class="type">Bool</span>&gt;(value: <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">var</span> trueSB: <span class="type">Block</span>?</span><br><span class="line"><span class="keyword">var</span> falseSB: <span class="type">Block</span>?</span><br></pre></td></tr></table></figure><p>然后再init 里面订阅 stat，后续会对stat</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">stat.skip(<span class="number">1</span>).asObservable().subscribe(onNext: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] status <span class="keyword">in</span></span><br><span class="line">  <span class="keyword">let</span> block <span class="operator">=</span> status <span class="operator">?</span> <span class="keyword">self</span><span class="operator">?</span>.trueSB : <span class="keyword">self</span><span class="operator">?</span>.falseSB</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">let</span> b <span class="operator">=</span> block &#123;</span><br><span class="line">    b(<span class="keyword">self</span><span class="operator">!</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).disposed(by: disposeBag)</span><br></pre></td></tr></table></figure><p>在写样式的时候可以吧选择和非选择状态一起写了</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">likeBtn.trueSB <span class="operator">=</span> &#123; btn <span class="keyword">in</span></span><br><span class="line">    btn.setImage(<span class="type">UIImage</span>(named: <span class="string">&quot;zan_full.png&quot;</span>), for: .normal)</span><br><span class="line">    btn.setTitle(<span class="string">&quot;已赞&quot;</span>, for: .normal)</span><br><span class="line">&#125;</span><br><span class="line">likeBtn.falseSB <span class="operator">=</span> &#123; btn <span class="keyword">in</span></span><br><span class="line">    btn.setImage(<span class="type">UIImage</span>(named: <span class="string">&quot;zan.png&quot;</span>), for: .normal)</span><br><span class="line">    btn.setTitle(<span class="string">&quot;赞&quot;</span>, for: .normal)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再赋值的时候就不用再关心样式的问题，只需要给stat属性赋一个true or false</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">likeBtn.stat.accept(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p>同样的 UIView UIImageView 都可以类似操作</p><h3 id="三、部分元素根据数据是否显示对上下元素的影响"><a href="#三、部分元素根据数据是否显示对上下元素的影响" class="headerlink" title="三、部分元素根据数据是否显示对上下元素的影响"></a>三、部分元素根据数据是否显示对上下元素的影响</h3><p>例如在写用户评论哪一块，类似朋友圈。<br>根据数据，点赞、评论、图片等元素可能有可能没有，还要考虑各个元素间的距离</p><p>目前解决办法也和第二条一样，在写约束的时候，写在trueSB 和 falseSB 里面</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">heart.trueSB <span class="operator">=</span> &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] v <span class="keyword">in</span></span><br><span class="line">  v.snp.remakeConstraints &#123; make <span class="keyword">in</span></span><br><span class="line">    make.left.equalTo(<span class="type">ContentEdge</span>.left)</span><br><span class="line">    make.top.equalTo(<span class="keyword">self</span><span class="operator">!</span>.content.snp.bottom).offset(<span class="number">10</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">heart.falseSB <span class="operator">=</span> &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] v <span class="keyword">in</span></span><br><span class="line">  v.snp.remakeConstraints &#123; make <span class="keyword">in</span></span><br><span class="line">    make.left.equalTo(<span class="type">ContentEdge</span>.left)</span><br><span class="line">    make.height.equalTo(<span class="number">0</span>)</span><br><span class="line">    make.top.equalTo(<span class="keyword">self</span><span class="operator">!</span>.content.snp.bottom).offset(<span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面两条主要是让样式代码和逻辑代码，更加高聚合低耦合</p><p>ps: 其实也可以通过写一个set方法来调用block，达到同样的效果，不必使用rxcocoa</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>runloop</title>
    <link href="/2018/09/20/runloop/"/>
    <url>/2018/09/20/runloop/</url>
    
    <content type="html"><![CDATA[<h3 id="runloop相关的应用"><a href="#runloop相关的应用" class="headerlink" title="runloop相关的应用"></a>runloop相关的应用</h3><h4 id="滑动列表的优化"><a href="#滑动列表的优化" class="headerlink" title="滑动列表的优化"></a>滑动列表的优化</h4><p>cell中设置图片 会卡顿以下，可以吧设置image的代码放置在runloop default 的mode里运行。<br>避免滑动的过程中去触发设置image的动作。</p><h4 id="app-Crash-的优化"><a href="#app-Crash-的优化" class="headerlink" title="app Crash 的优化"></a>app Crash 的优化</h4><p>crash后 可以重新唤醒一个app 做一些提示性的文字 发送报错邮件等</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>RXSwift</title>
    <link href="/2018/09/14/rxswift/"/>
    <url>/2018/09/14/rxswift/</url>
    
    <content type="html"><![CDATA[<p>最近新的项目采用了rxswift + mvvm 来写。<br>网络框架用的moya 的rxswift版。</p><p>总的体验来说，mvvm架构中，确定体会到了把数据逻辑剥离出来并且方便复用的便利。<br>采用了响应式编程理念，用了rxswift。在某些场景下，rxswift 的体验非常好.<br>不过现在也造成了在问题追踪上会比较麻烦。</p><p>这几个月当中也是踩了不少坑，结合实际开发简单说说rxswift的一些实际运用。</p><h3 id="实际应用当中的一些使用场景"><a href="#实际应用当中的一些使用场景" class="headerlink" title="实际应用当中的一些使用场景"></a>实际应用当中的一些使用场景</h3><h4 id="1-简化tableview等数据绑定流程"><a href="#1-简化tableview等数据绑定流程" class="headerlink" title="1. 简化tableview等数据绑定流程"></a>1. 简化tableview等数据绑定流程</h4><p>结合 RXDataSource 简化 tableview、collectionview 等的数据绑定</p><h4 id="2-简化复杂页面多状态间的逻辑"><a href="#2-简化复杂页面多状态间的逻辑" class="headerlink" title="2. 简化复杂页面多状态间的逻辑"></a>2. 简化复杂页面多状态间的逻辑</h4><p>类似登录、购物车等这些多个状态互相之间影响的，使用 rxswift 会极大的简化逻辑流程。</p><h4 id="3-同步状态信息"><a href="#3-同步状态信息" class="headerlink" title="3. 同步状态信息"></a>3. 同步状态信息</h4><p>类似很多页面出现相同的数据列表，列表还会展示状态信息，比如点赞、收藏等。<br>这些状态信息同步可以通过发送事件，在所有相关列表订阅这个事件，然后处理改变各自列表的状态</p><h3 id="rxswift学习笔记"><a href="#rxswift学习笔记" class="headerlink" title="rxswift学习笔记"></a>rxswift学习笔记</h3><p>写的并不全，主要是对一些常用的地方做个简单的记录</p><h4 id="1-share-replay-scope"><a href="#1-share-replay-scope" class="headerlink" title="1. share(replay:scope:)"></a>1. <strong>share(replay:scope:)</strong></h4><p>在某些情况下，可能会对Observer 进行多次订阅，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ob <span class="operator">=</span> <span class="type">Observable</span>.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>).map &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;.share(replay: <span class="number">1</span>, scope: .forever)</span><br><span class="line">ob.subscribe(onNext: &#123; res <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;first sub&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">ob.subscribe(onNext: &#123; res <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;second sub&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>执行结果如下，多次订阅会将整个链式多次执行，但大多数情况下只希望map 只执行一次，比如map里面可能是网络请求等等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">first sub</span><br><span class="line">1</span><br><span class="line">second sub</span><br></pre></td></tr></table></figure><p>可以在map后面添加share</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ob <span class="operator">=</span> <span class="type">Observable</span>.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>).map &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;.share(replay: <span class="number">1</span>, scope: .forever)</span><br></pre></td></tr></table></figure><p>现在链式只执行了一次</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">first sub</span><br><span class="line">second sub</span><br></pre></td></tr></table></figure><h4 id="2-retry"><a href="#2-retry" class="headerlink" title="2. retry"></a>2. <strong>retry</strong></h4><p>当遇到error 时，会重新订阅该序列<br>retry(2)里面数字代表重试次数，默认1次</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">enum MyError: Error &#123;</span><br><span class="line">    case A</span><br><span class="line">    case B</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var count = 1</span><br><span class="line">let sequenceThatErrors = Observable&lt;String&gt;.create &#123; observer in</span><br><span class="line">    observer.onNext(&quot;a&quot;)</span><br><span class="line">    observer.onNext(&quot;b&quot;)</span><br><span class="line"></span><br><span class="line">    //让第一个订阅时发生错误</span><br><span class="line">    if count == 1 &#123;</span><br><span class="line">        observer.onError(MyError.A)</span><br><span class="line">        print(&quot;Error encountered&quot;)</span><br><span class="line">        count += 1</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    observer.onNext(&quot;c&quot;)</span><br><span class="line">    observer.onNext(&quot;d&quot;)</span><br><span class="line">    observer.onCompleted()</span><br><span class="line"></span><br><span class="line">    return Disposables.create()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sequenceThatErrors</span><br><span class="line">    .retry(2)  //重试2次（参数为空则只重试一次）</span><br><span class="line">    .subscribe(onNext: &#123; print($0) &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-debug"><a href="#3-debug" class="headerlink" title="3. debug"></a>3. <strong>debug</strong></h4><p>可以打印相关信息，方便调试<br>多个debug时，添加字符串予以区分：debug(“调试”)</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ob <span class="operator">=</span> <span class="type">Observable</span>.of(<span class="number">1</span>).map &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;.share(replay: <span class="number">1</span>, scope: .forever                    )</span><br><span class="line">ob.debug(<span class="string">&quot;frist&quot;</span>).subscribe(onNext: &#123; res <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;first sub&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">ob.debug(<span class="string">&quot;second&quot;</span>).subscribe(onNext: &#123; res <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;second sub&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>打印：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">2018-12-24 15:07:29.612: frist -&gt; subscribed</span><br><span class="line">1</span><br><span class="line">2018-12-24 15:07:29.614: frist -&gt; Event next(())</span><br><span class="line">first sub</span><br><span class="line">2018-12-24 15:07:29.614: frist -&gt; Event completed</span><br><span class="line">2018-12-24 15:07:29.614: frist -&gt; isDisposed</span><br><span class="line">2018-12-24 15:07:29.655: second -&gt; subscribed</span><br><span class="line">2018-12-24 15:07:29.656: second -&gt; Event next(())</span><br><span class="line">second sub</span><br><span class="line">2018-12-24 15:07:29.656: second -&gt; Event completed</span><br><span class="line">2018-12-24 15:07:29.656: second -&gt; isDisposed</span><br></pre></td></tr></table></figure><h4 id="4-Single"><a href="#4-Single" class="headerlink" title="4. Single"></a>4. <strong>Single</strong></h4><p>Single 是 Observable 的另外一个版本。但它不像 Observable 可以发出多个元素，它要么只能发出一个元素，要么产生一个 error 事件。</p><ul><li>发出一个元素，或一个 error 事件</li><li>不会共享状态变化</li></ul><h4 id="5-Subjects"><a href="#5-Subjects" class="headerlink" title="5. Subjects"></a>5. <strong>Subjects</strong></h4><p>subjects 即是 Observer，也是 Observable。它可以动态接受新的值，然后通过 Event 将新值发送给所有的订阅者</p><p>subjects 一共有四种：PublishSubject、BehaviorSubject、ReplaySubject、Variable<br>共同点：</p><ul><li>一旦发送 .complete or .error 事件，该subject 将终结，不再发送 .next 事件</li><li>对于在终结后订阅该sunject 的订阅者，也会收到一条.complete or .error，告诉新的订阅者已经终结了<br>区别：</li><li>最大的区别在于新的订阅者能不能收到旧的event，能的话能收到多少个。</li></ul><ol><li><strong>PublishSubject</strong></li></ol><ul><li>最普通的subject，不需要初始值就能创建</li><li>只能收到订阅之后的event，无法收到旧的 event</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s <span class="operator">=</span> <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</span><br><span class="line">s.onNext(<span class="string">&quot;first&quot;</span>)</span><br><span class="line">s.subscribe(onNext: &#123; s <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sub <span class="subst">\(s)</span>&quot;</span>)</span><br><span class="line">&#125;).disposed(by: disposeBag)</span><br><span class="line">s.onNext(<span class="string">&quot;second&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sub second</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>BehaviorSubject</strong></li></ol><ul><li>需要一个初始值来创建</li><li>一个新的订阅者会立刻收到上一个event，之后照常</li></ul><ol start="3"><li><strong>ReplaySubject</strong></li></ol><ul><li>创建的时候需要设置一额bufferSize，表示它对发送过的event的缓存个数</li><li>它会缓存bufferSize个 .next 事件，新的订阅者会立刻收到缓存的 .next事件</li><li>如果是在subject 结束后订阅的，则除了缓存的 .next事件 还会收到 .complete or .error</li></ul><ol start="4"><li><strong>Variable</strong></li></ol><ul><li>是对 BehaviorSubject 的一层封装，必须通过一个初始值来创建</li><li>具有 BehaviorSubject 相同的功能，能向新的订阅者发送上一个event 还有之后新的event</li><li>不同的是， BehaviorSubject会吧值作为自己的属性保存下来，在销毁时会自动发送 .complete。</li><li>不需要也不能给它发送 .complete or .error 来结束它</li></ul><ol start="5"><li><strong>BehaviorRelay</strong></li></ol><ul><li>是对 BehaviorSubject 的一层包装</li><li>和 BehaviorSubject 不同的是不能用 .error or .complete 来结束</li></ul><h4 id="6-drive"><a href="#6-drive" class="headerlink" title="6. drive"></a>6. <strong>drive</strong></h4><p>如果我们的序列满足如下特征，就可以使用它：</p><ul><li>不会产生 error 事件</li><li>一定在主线程监听（MainScheduler）</li><li>共享状态变化（shareReplayLatestWhileConnected）</li></ul><h4 id="7-flatMap"><a href="#7-flatMap" class="headerlink" title="7. flatMap"></a>7. <strong>flatMap</strong></h4><ul><li>flatMap 会对每一个元素应用一个转换方法，转换成一个 Observable，等于是变成一个Observables的序列，然后再对Observables的元素合并之后再发出来，等于又将其降维成一个Observable</li><li>这个用处很大，如果一个Observable 的元素同样也是一个Observable时，利用flatMap可以将其元素都发送出来。<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> subject1 <span class="operator">=</span> <span class="type">BehaviorSubject</span>(value: <span class="string">&quot;A&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> subject2 <span class="operator">=</span> <span class="type">BehaviorSubject</span>(value: <span class="string">&quot;1&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> variable <span class="operator">=</span> <span class="type">Variable</span>(subject1)</span><br><span class="line"> </span><br><span class="line">variable.asObservable()</span><br><span class="line">    .flatMap &#123; <span class="variable">$0</span> &#125;</span><br><span class="line">    .subscribe(onNext: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;)</span><br><span class="line"> </span><br><span class="line">subject1.onNext(<span class="string">&quot;B&quot;</span>)</span><br><span class="line">variable.value <span class="operator">=</span> subject2</span><br><span class="line">subject2.onNext(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">subject1.onNext(<span class="string">&quot;C&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="8-ControlProperty"><a href="#8-ControlProperty" class="headerlink" title="8. ControlProperty"></a>8. <strong>ControlProperty</strong></h4><p>ControlProperty 是专门用来描述UI控件属性，拥有该类型的属性都是被观察者Observable<br>有一下特征：</p><ul><li>不会产生error 事件</li><li>一定在 MainScheduler 订阅</li><li>一定在 MainScheduler 监听</li></ul><h4 id="9-ControlEvent"><a href="#9-ControlEvent" class="headerlink" title="9. ControlEvent"></a>9. <strong>ControlEvent</strong></h4><p>ControlEvent 是专门用来描述UI所产生的事件，拥有该类型的属性都是被观察者Observable有一下特征：</p><ul><li>不会产生error 事件</li><li>一定在 MainScheduler 订阅</li><li>一定在 MainScheduler 监听</li><li>共享状态变化</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>WkWebview与其他组件混排</title>
    <link href="/2018/09/13/wkwebview/"/>
    <url>/2018/09/13/wkwebview/</url>
    
    <content type="html"><![CDATA[<p>根据项目需求，需要多个webview和自定义的组件根据 API 返回数据动态混排。<br>并且需要针对css以及图片懒加载优化。</p><h3 id="一、添加css"><a href="#一、添加css" class="headerlink" title="一、添加css"></a>一、添加css</h3><p>这一点比较简单，webview所显示的内容是通过接口返回获得的字符串。<br>做一个简单的拼接就可以。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> link <span class="operator">=</span> <span class="string">&quot;&lt;link rel=<span class="subst">\&quot;</span>stylesheet<span class="subst">\&quot;</span> href=<span class="subst">\&quot;</span><span class="subst">\(String(describing: Bundle.main.url(forResource: <span class="string">&quot;RichStyle&quot;</span>, withExtension: <span class="string">&quot;css&quot;</span>)<span class="operator">!</span>))</span><span class="subst">\&quot;</span>&gt;&quot;</span></span><br><span class="line"><span class="keyword">let</span> htmlContent <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;header&gt;</span></span><br><span class="line"><span class="string">&lt;meta name=&#x27;viewport&#x27; content=&#x27;width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no&#x27; /&gt;</span></span><br><span class="line"><span class="string"><span class="subst">\(link)</span></span></span><br><span class="line"><span class="string">&lt;/header&gt;</span></span><br><span class="line"><span class="string">&lt;div class=&#x27;richtext-container&#x27;&gt;</span></span><br><span class="line"><span class="string"><span class="subst">\(newContent)</span></span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>newContent</strong> 是内容正文<br><strong>link</strong> 是css样式<br>其中由于显示问题，需要在头部添加 <strong>meta</strong> 这一段。<br>由于css比较多，放在一起不太合适。可以写在另一个文件中，通过 <strong>Bundle</strong> 形式加载。<br>这里有个需要注意的地方，css文件存放的位置。<br>此刻RichStyle.css 存放在/Classes/Utils/ 下。<br>要在加载html 时，指定在 <strong>file:///Classes/Utils/</strong> 目录下。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webView.loadHTMLString(htmlContent, baseURL: <span class="type">URL</span>(string: <span class="string">&quot;file:///Classes/Utils/&quot;</span>) )</span><br></pre></td></tr></table></figure><h3 id="二、图片懒加载"><a href="#二、图片懒加载" class="headerlink" title="二、图片懒加载"></a>二、图片懒加载</h3><p>如果是单个webview，且视窗大小固定。可以使用 <strong>lazysizes</strong>，纯js原生，不依赖任何其他库。<br><strong>lazysizes</strong> 的逻辑是webview 视窗之外的图片懒加载，滑动到视窗的img 才会加载。<br>但项目中是多个webview 及其他组件 全展开显示在scrollview里面。<br>webview 视窗高度根据内容高度来的。导致 <strong>lazysizes</strong>依旧还是在加载同时把所有页面图片加载完，不过加载图片是在 <strong>didFinish</strong>之后。</p><p>目前的解决办法就是：</p><ul><li>拿到数据后对其中img标签作调整，将src 的值替换到 data-src中，这样没有src 则图片不会加载。或者给src设置一个占位图片的值也可以，并设置好大小。</li><li>在scrollview 中针对滚动代理方法优化，让页面停止下来时才开始触发加载图片的方法。</li><li>触发的方法 会让scrollview中 所有的webview 调用 判断是否加载图片的js脚本。并且会传入当前scrollview的contentOffset 和 webview的frame.minY</li><li>js脚本拿到当前webview 当中所有的imgs，遍历每一个img，并根据img的topoff 和webview 的偏移参数计算这个img 是否是在scrollview的视窗内。</li><li>然后判断修改img的src 加载图片。</li><li>还有点就是要刷新webview的高度, 可以在加载图片后 js 调swift 刷新高度，或者弄个定时器执行js脚本刷新高度</li></ul><h5 id="一、停止滚动触发监测加载图片的方法"><a href="#一、停止滚动触发监测加载图片的方法" class="headerlink" title="一、停止滚动触发监测加载图片的方法"></a>一、停止滚动触发监测加载图片的方法</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">scrollViewDidEndDragging</span>(<span class="keyword">_</span> <span class="params">scrollView</span>: <span class="type">UIScrollView</span>, <span class="params">willDecelerate</span> <span class="params">decelerate</span>: <span class="type">Bool</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="operator">!</span>decelerate &#123;</span><br><span class="line">        <span class="keyword">let</span> dragTpDragStop <span class="operator">=</span> scrollView.isTracking <span class="operator">&amp;&amp;</span> <span class="operator">!</span>scrollView.isDragging <span class="operator">&amp;&amp;</span> <span class="operator">!</span>scrollView.isDecelerating</span><br><span class="line">        <span class="keyword">if</span> dragTpDragStop &#123;</span><br><span class="line">            scrollViewDidEndScroll()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">scrollViewDidEndDecelerating</span>(<span class="keyword">_</span> <span class="params">scrollView</span>: <span class="type">UIScrollView</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> scrollToScrollStop <span class="operator">=</span> <span class="operator">!</span>scrollView.isTracking <span class="operator">&amp;&amp;</span> <span class="operator">!</span>scrollView.isDragging <span class="operator">&amp;&amp;</span> <span class="operator">!</span>scrollView.isDecelerating</span><br><span class="line">    <span class="keyword">if</span> scrollToScrollStop &#123;</span><br><span class="line">        scrollViewDidEndScroll()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">scrollViewDidEndScroll</span>()</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> scrollOffset <span class="operator">=</span> scrollView.contentOffset.y</span><br><span class="line">    <span class="keyword">for</span> rh <span class="keyword">in</span> allRichText.enumerated() &#123;<span class="comment">// rh 是一个包含 webview属性的组件</span></span><br><span class="line">        rh.element.loadImgsScript(offset:scrollOffset, wkTop: rh.element.frame.minY)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="二、执行每个webview的JS脚本"><a href="#二、执行每个webview的JS脚本" class="headerlink" title="二、执行每个webview的JS脚本"></a>二、执行每个webview的JS脚本</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadImgsScript</span>(<span class="params">offset</span>: <span class="type">CGFloat</span>, <span class="params">wkTop</span>: <span class="type">CGFloat</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> minOffset <span class="operator">=</span> offset</span><br><span class="line">    <span class="keyword">let</span> maxOffset <span class="operator">=</span> offset <span class="operator">+</span> bmy_screenHeight</span><br><span class="line">    <span class="keyword">let</span> script <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        var imgs = document.getElementsByTagName(&#x27;img&#x27;);</span></span><br><span class="line"><span class="string">        var minOffset = <span class="subst">\(minOffset)</span></span></span><br><span class="line"><span class="string">        var maxOffset = <span class="subst">\(maxOffset)</span></span></span><br><span class="line"><span class="string">        var wkTop = <span class="subst">\(wkTop)</span></span></span><br><span class="line"><span class="string">        function lazyload()&#123;</span></span><br><span class="line"><span class="string">            for(var i=0; i&lt;imgs.length; i++) &#123;</span></span><br><span class="line"><span class="string">                var img = imgs[i]</span></span><br><span class="line"><span class="string">                var top = img.offsetTop + wkTop</span></span><br><span class="line"><span class="string">                var isDisplay = false</span></span><br><span class="line"><span class="string">                if((top &gt; minOffset - 300) &amp;&amp; top &lt; maxOffset + 300) &#123;</span></span><br><span class="line"><span class="string">                    isDisplay = true</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">                if(isDisplay)&#123;</span></span><br><span class="line"><span class="string">                    img.src = img.getAttribute(&#x27;data-src&#x27;);</span></span><br><span class="line"><span class="string">                    img.setAttribute(&#x27;class&#x27;,&#x27;lazyloaded&#x27;);</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        lazyload()</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    webView.evaluateJavaScript(script) &#123; (res, error) <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> e <span class="operator">=</span> error &#123;</span><br><span class="line">            <span class="built_in">print</span>(error)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="刷新webview-的高度"><a href="#刷新webview-的高度" class="headerlink" title="刷新webview 的高度"></a>刷新webview 的高度</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">reloadWebviewHeight</span>()</span> &#123;</span><br><span class="line">    webView.evaluateJavaScript(<span class="string">&quot;document.body.scrollHeight&quot;</span>) &#123; (value, error) <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> safeValue <span class="operator">=</span> value <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        <span class="keyword">let</span> height <span class="operator">=</span> <span class="type">CGFloat</span>(safeValue <span class="keyword">as!</span> <span class="type">CGFloat</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> height <span class="operator">&gt;</span> <span class="keyword">self</span>.contentHeight &#123;</span><br><span class="line">            <span class="keyword">self</span>.contentHeight <span class="operator">=</span> height</span><br><span class="line">            <span class="keyword">self</span>.webView.snp.updateConstraints(&#123; (make) <span class="keyword">in</span></span><br><span class="line">                make.height.equalTo(height)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>WkWebview 与 js 交互</title>
    <link href="/2018/09/13/wkwebview-js/"/>
    <url>/2018/09/13/wkwebview-js/</url>
    
    <content type="html"><![CDATA[<p>最近由于项目的原因，需要wkwebview 与 js 频繁的交互<br>主要有以下两种</p><ul><li>Content-Blocking Rules</li><li>调用wkwebview 的js执行脚本的方法</li><li>JS 调用 swift</li></ul><h3 id="一、Content-Blocking-Rules"><a href="#一、Content-Blocking-Rules" class="headerlink" title="一、Content-Blocking Rules"></a>一、Content-Blocking Rules</h3><p>如果是iOS11 之后的并且需求简单 wkwebview 提供了一个内容过滤规则的功能。可以简单处理一些操作。这个的好处是webview显示内容之前就可以处理。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> jsonString <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[&#123;</span></span><br><span class="line"><span class="string">    &quot;trigger&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;url-filter&quot;: &quot;.*&quot;,</span></span><br><span class="line"><span class="string">        &quot;resource-type&quot;:[&quot;document&quot;]</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &quot;action&quot;:&#123;</span></span><br><span class="line"><span class="string">        &quot;type&quot;: &quot;css-display-none&quot;,</span></span><br><span class="line"><span class="string">        &quot;selector&quot;: &quot;.js-mp-info&quot;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">#available</span>(<span class="keyword">iOS</span> <span class="number">11.0</span>, <span class="operator">*</span>) &#123;</span><br><span class="line">    <span class="type">WKContentRuleListStore</span>.default().compileContentRuleList(forIdentifier: <span class="string">&quot;demoRuleList&quot;</span>, encodedContentRuleList: jsonString) &#123; (list, error) <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> contentRuleList <span class="operator">=</span> list <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        <span class="keyword">let</span> configuration <span class="operator">=</span> <span class="keyword">self</span>.webView.configuration</span><br><span class="line">        configuration.userContentController.add(contentRuleList)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> detailUrl <span class="operator">=</span> <span class="keyword">self</span>.detailUrl &#123;</span><br><span class="line">            <span class="keyword">self</span>.urlStr <span class="operator">=</span> detailUrl</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>url-filter 可以用正则匹配url 是否触发规则过滤<br>resource-type 是适用资源类型</p><ul><li>document</li><li>image</li><li>style-sheet</li><li>script</li><li>font</li><li>raw (Any untyped load, such as XMLHttpRequest)</li><li>svg-document</li><li>media</li><li>popup</li></ul><p>action type 是动作类型</p><ul><li><p>block<br>Tells the browser engine to abort loading the resource. If the resource was cached, the cache is ignored.</p></li><li><p>block-cookies<br>The engine strips all cookies from the header before sending the request to the server. Safari’s own privacy policy takes precedence, so that only cookies that would otherwise be accepted by the privacy policy can be blocked. Combining block-cookies and ignore-previous-rules will not override the browser’s privacy settings.</p></li><li><p>css-display-none<br>Hides elements of the page based on a CSS selector. A second action field, named selector, contains the selector list. Any element matching the selector list has its display property set to none, which hides it.</p></li><li><p>ignore-previous-rules<br>Previously triggered actions are not performed.</p></li><li><p>make-https<br>Changes a URL from http to https before making a server request. URLs with a specified port (other than the default port 80) and links using other protocols are not affected.</p></li></ul><p><a href="https://developer.apple.com/library/archive/documentation/Extensions/Conceptual/ContentBlockingRules/CreatingRules/CreatingRules.html"><strong>Content-Blocking Rules</strong> Apple官方文档使用说明</a></p><h3 id="二、调用wkwebview-的js执行脚本的方法"><a href="#二、调用wkwebview-的js执行脚本的方法" class="headerlink" title="二、调用wkwebview 的js执行脚本的方法"></a>二、调用wkwebview 的js执行脚本的方法</h3><p>如果版本小于ios11，没有Content-Blocking Rules，或者规则不能满足需求。<br>也可以通过调用 <strong>wk.evaluateJavaScript</strong> 方法, 直接执行js。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str <span class="operator">=</span> <span class="string">&quot;$(&#x27;.js-mp-info&#x27;).remove();&quot;</span></span><br><span class="line">webView.evaluateJavaScript(str, completionHandler: <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><p>JS代码除了直接写成string之外，也可以在另写在文件里，然后读取文件。<br>例如 JS相关代码写在 <strong>LoginJavaScript.js</strong> 文件里</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsHandler <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    jsHandler <span class="operator">=</span> <span class="keyword">try</span> <span class="type">String</span>(contentsOf: <span class="type">Bundle</span>.main.url(forResource: <span class="string">&quot;LoginJavaScript&quot;</span>, withExtension: <span class="string">&quot;js&quot;</span>)<span class="operator">!</span>, encoding: <span class="type">String</span>.<span class="type">Encoding</span>.utf8)</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> wkScript <span class="operator">=</span> <span class="type">WKUserScript</span>.<span class="keyword">init</span>(source: jsHandler,</span><br><span class="line">                                  injectionTime: <span class="type">WKUserScriptInjectionTime</span>.atDocumentEnd,</span><br><span class="line">                                  forMainFrameOnly: <span class="literal">true</span>)</span><br><span class="line">config.userContentController.addUserScript(wkScript)</span><br><span class="line"><span class="keyword">let</span> wk <span class="operator">=</span> <span class="type">WKWebView</span>.<span class="keyword">init</span>(frame: .zero, configuration: config)</span><br></pre></td></tr></table></figure><h3 id="三、JS-调用-swift"><a href="#三、JS-调用-swift" class="headerlink" title="三、JS 调用 swift"></a>三、JS 调用 swift</h3><h4 id="预定义"><a href="#预定义" class="headerlink" title="预定义"></a>预定义</h4><p>wkwebview的 config 可以事先定义一些事件</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> config <span class="operator">=</span> <span class="type">WKWebViewConfiguration</span>()</span><br><span class="line">config.userContentController.add(<span class="keyword">self</span>, name: <span class="string">&quot;eventOne&quot;</span>)</span><br><span class="line">config.userContentController.add(<span class="keyword">self</span>, name: <span class="string">&quot;eventTwo&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="JS调用"><a href="#JS调用" class="headerlink" title="JS调用"></a>JS调用</h4><p>然后在JS 脚本里面调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webkit.messageHandlers.eventOne.postMessage(message);</span><br></pre></td></tr></table></figure><p>其中 <strong>eventOne</strong> 就是之前事先定义好的事件名字。<br><strong>message</strong> 就是 js 向 swift 传递的信息</p><h4 id="Swift-代理方法监听"><a href="#Swift-代理方法监听" class="headerlink" title="Swift 代理方法监听"></a>Swift 代理方法监听</h4><p>实现 <strong>WKScriptMessageHandler</strong> 下的一个代理方法，在方法里面监测到JS触发的预定义的事件</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">userContentController</span>(<span class="keyword">_</span> <span class="params">userContentController</span>: <span class="type">WKUserContentController</span>, <span class="params">didReceive</span> <span class="params">message</span>: <span class="type">WKScriptMessage</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> message.name &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;eventOne&quot;</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;eventOne&quot;</span>)</span><br><span class="line">      <span class="built_in">print</span>(message.body)<span class="comment">//js传来的信息</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;eventTwo&quot;</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;eventTwo&quot;</span>)</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;none&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>iOS约束冲突警告解决办法</title>
    <link href="/2018/09/12/ios-constraints/"/>
    <url>/2018/09/12/ios-constraints/</url>
    
    <content type="html"><![CDATA[<p>在开发过程中经常会遇到页面显示正常，但依然还有冲突警告。<br>通常的原因有2个。</p><h3 id="一、cell-中的约束冲突"><a href="#一、cell-中的约束冲突" class="headerlink" title="一、cell 中的约束冲突"></a>一、cell 中的约束冲突</h3><p>在这种情况下，在 xcode 的控制台打印出得信息当中会单独拎出一条约束。<br>Will attempt to recover by breaking constraint 下面那一条</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Probably</span> at least one of the constraints <span class="keyword">in</span> the following list <span class="keyword">is</span> one you don&#x27;t want. </span><br><span class="line"><span class="type">Try</span> this: </span><br><span class="line">    (<span class="number">1</span>) look at each constraint and <span class="keyword">try</span> to figure out which you don&#x27;t expect; </span><br><span class="line">    (<span class="number">2</span>) find the code that added the unwanted constraint or constraints and fix it. </span><br><span class="line">(</span><br><span class="line">    <span class="string">&quot;&lt;SnapKit.LayoutConstraint:0x6040002a08a0@ChoiceArticleCell.swift#182 UIImageView:0x7fae99d49240.left == UIView:0x7fae99d55e70.left&gt;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&lt;SnapKit.LayoutConstraint:0x6040002a0900@ChoiceArticleCell.swift#182 UIImageView:0x7fae99d49240.top == UIView:0x7fae99d55e70.top&gt;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&lt;SnapKit.LayoutConstraint:0x6040002a0960@ChoiceArticleCell.swift#182 UIImageView:0x7fae99d49240.right == UIView:0x7fae99d55e70.right&gt;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&lt;SnapKit.LayoutConstraint:0x6040002a09c0@ChoiceArticleCell.swift#182 UIImageView:0x7fae99d49240.bottom == UIView:0x7fae99d55e70.bottom&gt;&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="type">Will</span> attempt to recover by breaking constraint </span><br><span class="line"><span class="operator">&lt;</span><span class="type">SnapKit</span>.<span class="type">LayoutConstraint</span>:<span class="number">0x6040002a0a20</span><span class="meta">@ChoiceArticleCell</span>.swift#<span class="number">183</span> <span class="type">UIImageView</span>:<span class="number">0x7fae99d49240</span>.height <span class="operator">==</span> <span class="type">UIImageView</span>:<span class="number">0x7fae99d49240</span>.width <span class="operator">*</span> <span class="number">0.425531923770905</span><span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>解决办法就是：将这条约束的 <strong>优先级降低</strong>。约束默认的优先级是1000。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make.height.equalTo(cover.snp.width).multipliedBy(<span class="number">1</span><span class="operator">/</span><span class="number">2.35</span>).priority(<span class="number">999</span>)</span><br></pre></td></tr></table></figure><h3 id="二、普通view里面-会出现-约束冲突"><a href="#二、普通view里面-会出现-约束冲突" class="headerlink" title="二、普通view里面 会出现 约束冲突"></a>二、普通view里面 会出现 约束冲突</h3><p>这种情况 通常是view的 <strong>translatesAutoresizingMaskIntoConstraints</strong>属性 导致<br>将其改为 false 可以解决问题<br>针对 view<br>如果使用 autulayout 就将 translatesAutoresizingMaskIntoConstraints 设为 false<br>如果不使用 autulayout 就将 translatesAutoresizingMaskIntoConstraints 设为 true</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.translatesAutoresizingMaskIntoConstraints <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在 tableview 的 header or footerview 使用约束的 view<br>该 view 的 translatesAutoresizingMaskIntoConstraints 属性需要设置为 true</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
